{"version":3,"sources":["images/arusimlogo.png","validation/is-empty.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","actions/types.js","store.js","components/common/TextFieldGroup.js","components/layout/Footer.js","components/auth/Agent.js","actions/authActions.js","components/auth/SuccessfullRegistration.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","isEmpty","value","undefined","Object","keys","length","trim","initialState","isAuthenticated","agent","combineReducers","auth","state","action","type","payload","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","f","TextFieldGroup","name","placeholder","error","label","info","onChange","disabled","className","classnames","style","height","color","defaultProps","textAlign","Date","getFullYear","Agent","props","firstName","lastName","email","phoneNumber","city","localGovernment","nin","designations","bind","onSubmit","this","history","push","nextProps","setState","e","target","preventDefault","newAgent","registerAgent","Jumbotron","fluid","Container","src","arusimLogo","alt","Col","md","span","offset","Row","noValidate","Footer","Component","connect","agentData","dispatch","axios","post","then","res","catch","err","response","data","withRouter","Successfull","setTimeout","App","Route","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.6e77214a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arusimlogo.57b1e232.png\";","const isEmpty = value =>\n  value === undefined ||\n  value === null ||\n  (typeof value === 'object' && Object.keys(value).length === 0) ||\n  (typeof value === 'string' && value.trim().length === 0);\n\nexport default isEmpty;\n","import isEmpty from \"../validation/is-empty\";\n\nimport { SET_CURRENT_AGENT } from \"../actions/types\";\n\nconst initialState = {\n  isAuthenticated: false,\n  agent: {}\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENT_AGENT:\n      return {\n        ...state,\n        isAuthenticated: !isEmpty(action.payload),\n        agent: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { GET_ERRORS, CLEAR_ERRORS } from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return action.payload;\n    case CLEAR_ERRORS:\n      return {};\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport authReducer from \"./authReducer\";\nimport errorReducer from \"./errorReducer\";\n\n\nexport default combineReducers({\n  auth: authReducer,\n  errors: errorReducer\n});\n","export const GET_ERRORS = \"GET_ERRORS\";\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\nexport const SET_CURRENT_AGENT = \"SET_CURRENT_AGENT\";","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__\n      ? window.__REDUX_DEVTOOLS_EXTENSION__()\n      : f => f\n  )\n);\n\nexport default store;","import React from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst TextFieldGroup = ({\n  name,\n  placeholder,\n  value,\n  label,\n  error,\n  info,\n  type,\n  onChange,\n  disabled\n}) => {\n  return (\n    <div className=\"form-group\">\n      <input\n        type={type}\n        className={classnames('form-control form-control-lg', {\n          'is-invalid': error\n        })}\n        placeholder={placeholder}\n        name={name}\n        value={value}\n        onChange={onChange}\n        disabled={disabled}\n        style={{height: '25px'}}\n      />\n      {info && <small className=\"form-text text-muted\">{info}</small>}\n      {error && <div style={{color: 'red'}} className=\"invalid-feedback\">{error}</div>}\n    </div>\n  );\n};\n\nTextFieldGroup.propTypes = {\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  info: PropTypes.string,\n  error: PropTypes.string,\n  type: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  disabled: PropTypes.string\n};\n\nTextFieldGroup.defaultProps = {\n  type: 'text'\n};\n\nexport default TextFieldGroup;\n","import React from \"react\";\n// import { Row, Col} from 'react-bootstrap';\n\n\nexport default () => {\n  return (\n \n    <footer  className=\" text-white mt-5 p-4 text-center\">\n      <p style={{textAlign: 'center', color: 'gray'}}>\n      Copyright &copy; {new Date().getFullYear()} Arusim Groceries Food Venture\n\n      </p>\n    </footer>\n\n  );\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { registerAgent } from \"../../actions/authActions\";\nimport TextFieldGroup from \"../common/TextFieldGroup\";\nimport { Jumbotron, Container, Row, Col } from 'react-bootstrap';\nimport Footer from '../layout/Footer.js'\n\nimport arusimLogo from '../../images/arusimlogo.png';\n\n\nclass Agent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      phoneNumber: '',\n      state: '',\n      city: '',\n      localGovernment: '',\n      nin: '',\n      designations: '',\n      errors: {}\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n\n  componentDidMount() {\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n  }\n\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({ errors: nextProps.errors });\n    }\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    const newAgent = {\n      firstName: this.state.firstName,\n      lastName: this.state.lastName,\n      email: this.state.email,\n      phoneNumber: this.state.phoneNumber,\n      state: this.state.state,\n      city: this.state.city,\n      localGovernment: this.state.localGovernment,\n      nin: this.state.nin,\n      designations: this.state.designations\n    };\n\n    this.props.registerAgent(newAgent, this.props.history);\n  }\n\n  render() {\n    const { errors } = this.state;\n\n    return (\n      <div>\n           \n        <Jumbotron fluid>\n          <Container>\n           \n         <div  style={{}}>\n              <center>\n                <img style={{height: '100px'}} src={arusimLogo} alt=\"pic\" />\n              </center>\n            </div>\n        \n         \n            <h1 style={{ textAlign: 'center', color: 'blue' }}>Vendor Request Form</h1>\n            <Col md={{ span: 4, offset: 4 }}>\n              <Row >\n                <div >\n                  <form noValidate onSubmit={this.onSubmit} style={{ textAlign: 'center' }}>\n                    <TextFieldGroup\n                      name=\"firstName\"\n                      placeholder=\"First Name\"\n                      type=\"text\"\n                      value={this.state.firstName}\n                      onChange={this.onChange}\n                      error={errors.firstName}\n                    />\n                    <br />\n\n                    <TextFieldGroup\n                      name=\"lastName\"\n                      placeholder=\"Last Name\"\n                      type=\"text\"\n                      value={this.state.lastName}\n                      onChange={this.onChange}\n                      error={errors.lastName}\n                    />\n                    <br />\n\n                    <TextFieldGroup\n                      name=\"email\"\n                      placeholder=\"email\"\n                      type=\"text\"\n                      value={this.state.email}\n                      onChange={this.onChange}\n                      error={errors.email}\n                    />\n                    <br />\n                    <TextFieldGroup\n                      placeholder=\"Mobile number\"\n                      type=\"text\"\n                      name=\"phoneNumber\"\n                      value={this.state.phoneNumber}\n                      onChange={this.onChange}\n                      error={errors.phoneNumber}\n                    />\n                    <br />\n                    <TextFieldGroup\n                      placeholder=\"NIN\"\n                      type=\"text\"\n                      name=\"nin\"\n                      value={this.state.nin}\n                      onChange={this.onChange}\n                      error={errors.nin}\n                    />\n                    <br />\n                    <TextFieldGroup\n                      placeholder=\"State\"\n                      type=\"text\"\n                      name=\"state\"\n                      value={this.state.state}\n                      onChange={this.onChange}\n                      error={errors.state}\n                    />\n                    <br />\n                    <TextFieldGroup\n                      placeholder=\"City\"\n                      type=\"text\"\n                      name=\"city\"\n                      value={this.state.city}\n                      onChange={this.onChange}\n                      error={errors.city}\n                    />\n                    <br />\n                    <TextFieldGroup\n                      placeholder=\"Local Government\"\n                      type=\"text\"\n                      name=\"localGovernment\"\n                      value={this.state.localGovernment}\n                      onChange={this.onChange}\n                      error={errors.localGovernment}\n                    />\n                    <br />\n                    <TextFieldGroup\n                      placeholder=\"Designations\"\n                      type=\"text\"\n                      name=\"designations\"\n                      value={this.state.designations}\n                      onChange={this.onChange}\n                      error={errors.designations}\n                    />\n                    <br />\n                    <input type=\"submit\" value=\"SEND\" />\n                  </form>\n                </div>\n              </Row>\n            </Col>\n\n          </Container>\n        </Jumbotron>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nAgent.propTypes = {\n  registerAgent: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, { registerAgent })(withRouter(Agent));\n","import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\nimport { GET_ERRORS, SET_CURRENT_AGENT } from \"./types\";\n\n\n// Register User\nexport const registerAgent = (agentData, history) => dispatch => {\n  axios\n    .post(\"/api/agents/agent\", agentData)\n    .then(res => history.push(\"/form-submitted\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_AGENT,\n    payload: decoded\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};","import React, { Component } from \"react\";\n\nclass Successfull extends Component {\n  constructor() {\n    super();\n    this.state = {\n    };\n  }\n\n  componentDidMount() {\n      setTimeout(() => {\n  \n      },3000)\n  }\n\n  render() {\n    return (\n      <div style={{ textAlign: 'center' }}>\n        <p>Your information have been Successfully submitted!!</p>\n        <p>Thank you...</p>\n      </div>\n    );\n  }\n}\nexport default Successfull;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport Agent from \"./components/auth/Agent\";\nimport Successfull from './components/auth/SuccessfullRegistration'\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <Route exact path=\"/\" component={Agent} />\n            <Route exact path=\"/form-submitted\" component={Successfull} />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}